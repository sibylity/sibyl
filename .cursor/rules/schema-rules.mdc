---
description: 
globs: 
alwaysApply: false
---
There are 3 schema file types supported by sibyl.

- config (1 per project)
- events (1 + n per project)
- globals (n per project)

# Analytics config file(s)

Description: contains global configuration, and code-gen configuration for sibyl.

Rules:

- A package using sibyl is required to define an "analytics.config.json" file in it's root directory for any of it's functionality to work.
- Only 1 "analytics.config.json" file is allowed per package.
- "version" is a required field.
- "generates" is a required field for any functionality to work.
- The "validate" cli command enforces that each entry under "generates" has a unique "output" directory.
- The "validate" cli command enforces that only valid directories & characters are used for the "events", "globals", and "output" fields.
- "globals" is an optional field for entries in "generates". "events" and "output" are required though.
- When the "output" field of an entry in "generates" ends in .ts, typescript types + tracking config get generated by the "generate" cli command. But when "output" ends in .js, only tracking config gets generated by the "generate" cli command.
- The "generate" cli command will generate output for each entry in the "generates" field.
- The "validate" cli command combines each pair of globals + events
- "disableComments" can be set on a "generates" entry. When false, the generated events in the output will include the event description as a jsdoc comments. When true, no jsdoc comments will be included.

---

# Analytics globals schema file(s)

Description: contains globals that apply to more than 1 event, such as global properties, and group properties. Also contains dimensions, which are "documentation only" tags that connect events to arbitrary tags.

Rules:

- A globals schema file is optional and can live anywhere. It just has to be a JSON file with the expected formatting.
- "dimensions" is an optional field. Example dimensions include "Free Users" and "Paid Users". The idea is that events that can only be triggered by paid users can be tagged with the "Paid Users" dimension to provide context as to who/what the event is relevant to.
- "dimensions" are not included in the output of the "generate" cli command.
- "properties" is an optional field. Properties support all of the same fields as event properties, and as group properties. These properties are considered "global properties", or "every event properties". The idea is that  these properties can be set on the tracker once, and then will be passed along with each tracked event.
- "groups" is an optional field. Groups are arbitrary groups that users can belong to, such as a "Team", or a "Workspace". Groups can have arbitrary sets of properties associated with them. When "tracker.group()" gets called for a specific group, that groups properties become a required arg type.
- The types for properties are the same between events, groups, and global properties. Property descriptions are optional, and properties are considered required unless an "optional: true" field is set. When "optional: true" is set, "undefined" and "null" are appended to the generated type as valid types.
- The supported types for properties includes:
  - string
  - string[] (array of strings)
  - number
  - number[] (array of numbers)
  - boolean
  - boolean[] (array of booleans)
  - enum (one of provided values)
  - any
- Generated property types also support functions that resolve to the expected type. This allows for functionality such as "tracker.setProperties({ url: () => window.location.href })", where the tracker can set the "url" property one time, but in a way that it's value will be dynamically evaluated each time that "tracker.track" gets called.

---

# Analytics events schema file(s)

Description: contains events that can be tracked by the tracker. Each event has an eventKey, which is used by "tracker.track()" to identify which event is being tracked. When a specific eventKey is used, the properties for that event become required types for the properties arg of "tracker.track()".

Rules:

- An events schema file is required and can live anywhere. It has to be a JSON file with the expected formatting.
- "name" is a required field for each event.
- "name" does not have to be unique for each event, and can be re-used arbitrarily.
- "description" is an optional field for each event.
- "description" is included as a jsdoc comment in the generated output unless "disableComments" is enabled.
- "properties" are the same for events as they are for global properties & group properties.
- "dimensions" are an optional field for each events. The dimensions used for an event get validated against the list of dimensions defined in the globals schema file that gets combined with the events schema file.
- "dimensions" are documentation only and do not end up in the generated output.

